{
  "service": {
    "service": "meetup",
    "serviceObject": {
      "name": "meetup"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "ap-south-1",
      "stage": "dev",
      "versionFunctions": true,
      "environment": {
        "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
        "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
      },
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-createUser"
            }
          },
          "LoginLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-login"
            }
          },
          "GetUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-getUser"
            }
          },
          "GetMeetingHistoryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-getMeetingHistory"
            }
          },
          "CreateMeetingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-createMeeting"
            }
          },
          "GetAllMeetingsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-getAllMeetings"
            }
          },
          "JoinMeetingLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-joinMeeting"
            }
          },
          "CheckMeetingExistsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/meetup-dev-checkMeetingExists"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "meetup",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/meetup-dev*:*:*"
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "meetup",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/AuthHandlers/createUser.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "LoginLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/AuthHandlers/login.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-login",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "LoginLogGroup"
            ]
          },
          "GetUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/AuthHandlers/getUser.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-getUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserLogGroup"
            ]
          },
          "GetMeetingHistoryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/AuthHandlers/getMeetingHistory.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-getMeetingHistory",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetMeetingHistoryLogGroup"
            ]
          },
          "CreateMeetingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/MeetingHandlers/createMeeting.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-createMeeting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateMeetingLogGroup"
            ]
          },
          "GetAllMeetingsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/MeetingHandlers/getAllMeetings.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-getAllMeetings",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetAllMeetingsLogGroup"
            ]
          },
          "JoinMeetingLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/MeetingHandlers/joinMeeting.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-joinMeeting",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "JoinMeetingLogGroup"
            ]
          },
          "CheckMeetingExistsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z/meetup.zip"
              },
              "Handler": "src/Handlers/MeetingHandlers/checkMeetingExists.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "meetup-dev-checkMeetingExists",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "DB_URI": "mongodb+srv://r3x:ashabaririmbo@cluster0.g2c9e5a.mongodb.net/MeetUp?retryWrites=true&w=majority",
                  "JWT_SECRET": "MEETUP_UNCRACKABLE_JWT_COMPLEX_BACKEND_MEETUP_TOKEN"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CheckMeetingExistsLogGroup"
            ]
          },
          "CreateUserLambdaVersionkMi3MVQ2ZP5kkrKyHLUIX9EkXU6VvrSXCSe6irI0U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "LoginLambdaVersionom9b7DgQbcYfNGdUYHvAhRZIiXA9WgfqUwzHJ63swOc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoginLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "GetUserLambdaVersionkLpruA97OOhNEUyEv3whtz2tUAOaVYsg0PbXTlZY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "GetMeetingHistoryLambdaVersion4ylaSJVQVUol32nttE6oqgcpifFyPxeu77QXWERZl1s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetMeetingHistoryLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "CreateMeetingLambdaVersionG2CN92Ot9hqezW9STeo3a0ZBLXMI5XjrEZwol8GH3o": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateMeetingLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "GetAllMeetingsLambdaVersionAcNngvUat5ds05uSXEFItTpV062GygIEjj1nhKvadY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAllMeetingsLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "JoinMeetingLambdaVersionYgllTYrSGmpFuxPGZ59QlnAW4f2HeDuB6RLCjuzM": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "JoinMeetingLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "CheckMeetingExistsLambdaVersion3ejq97jr5WsMxsO8yYGjfkQB3mbt2kGHDH0FLbWZ4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckMeetingExistsLambdaFunction"
              },
              "CodeSha256": "wvTE4Ln0ho5sxNJgCsdVe+gm+TtzoaJKSE9iGcbP16c="
            }
          },
          "HttpApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "dev-meetup",
              "ProtocolType": "HTTP"
            }
          },
          "HttpApiStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "StageName": "$default",
              "AutoDeploy": true,
              "DefaultRouteSettings": {
                "DetailedMetricsEnabled": false
              }
            }
          },
          "CreateUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV1AuthSignup": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v1/auth/signup",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateUser"
          },
          "LoginLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoginLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationLogin": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"LoginLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV1AuthLogin": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v1/auth/login",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationLogin"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationLogin"
          },
          "GetUserLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetUser": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetUserLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1AuthGetDashuser": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/auth/get-user",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetUser"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetUser"
          },
          "GetMeetingHistoryLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetMeetingHistoryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetMeetingHistory": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetMeetingHistoryLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1AuthGetDashmeetingDashhistory": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/auth/get-meeting-history",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetMeetingHistory"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetMeetingHistory"
          },
          "CreateMeetingLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateMeetingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCreateMeeting": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CreateMeetingLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1MeetCreateDashmeeting": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/meet/create-meeting",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCreateMeeting"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCreateMeeting"
          },
          "GetAllMeetingsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAllMeetingsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationGetAllMeetings": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"GetAllMeetingsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRouteGetApiV1MeetGetDashallDashmeetings": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "GET /api/v1/meet/get-all-meetings",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationGetAllMeetings"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationGetAllMeetings"
          },
          "JoinMeetingLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "JoinMeetingLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationJoinMeeting": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"JoinMeetingLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV1MeetJoinDashmeeting": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v1/meet/join-meeting",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationJoinMeeting"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationJoinMeeting"
          },
          "CheckMeetingExistsLambdaPermissionHttpApi": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckMeetingExistsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "HttpApi"
                    },
                    "/*"
                  ]
                ]
              }
            }
          },
          "HttpApiIntegrationCheckMeetingExists": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"CheckMeetingExistsLambdaPermissionHttpApi\"][\"Properties\"][\"FunctionName\"]"
              },
              "PayloadFormatVersion": "2.0",
              "TimeoutInMillis": 30000
            }
          },
          "HttpApiRoutePostApiV1MeetCheckDashmeetingDashexists": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "HttpApi"
              },
              "RouteKey": "POST /api/v1/meet/check-meeting-exists",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "HttpApiIntegrationCheckMeetingExists"
                    }
                  ]
                ]
              }
            },
            "DependsOn": "HttpApiIntegrationCheckMeetingExists"
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-meetup-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionkMi3MVQ2ZP5kkrKyHLUIX9EkXU6VvrSXCSe6irI0U"
            },
            "Export": {
              "Name": "sls-meetup-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "LoginLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoginLambdaVersionom9b7DgQbcYfNGdUYHvAhRZIiXA9WgfqUwzHJ63swOc"
            },
            "Export": {
              "Name": "sls-meetup-dev-LoginLambdaFunctionQualifiedArn"
            }
          },
          "GetUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserLambdaVersionkLpruA97OOhNEUyEv3whtz2tUAOaVYsg0PbXTlZY"
            },
            "Export": {
              "Name": "sls-meetup-dev-GetUserLambdaFunctionQualifiedArn"
            }
          },
          "GetMeetingHistoryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetMeetingHistoryLambdaVersion4ylaSJVQVUol32nttE6oqgcpifFyPxeu77QXWERZl1s"
            },
            "Export": {
              "Name": "sls-meetup-dev-GetMeetingHistoryLambdaFunctionQualifiedArn"
            }
          },
          "CreateMeetingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateMeetingLambdaVersionG2CN92Ot9hqezW9STeo3a0ZBLXMI5XjrEZwol8GH3o"
            },
            "Export": {
              "Name": "sls-meetup-dev-CreateMeetingLambdaFunctionQualifiedArn"
            }
          },
          "GetAllMeetingsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAllMeetingsLambdaVersionAcNngvUat5ds05uSXEFItTpV062GygIEjj1nhKvadY"
            },
            "Export": {
              "Name": "sls-meetup-dev-GetAllMeetingsLambdaFunctionQualifiedArn"
            }
          },
          "JoinMeetingLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "JoinMeetingLambdaVersionYgllTYrSGmpFuxPGZ59QlnAW4f2HeDuB6RLCjuzM"
            },
            "Export": {
              "Name": "sls-meetup-dev-JoinMeetingLambdaFunctionQualifiedArn"
            }
          },
          "CheckMeetingExistsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckMeetingExistsLambdaVersion3ejq97jr5WsMxsO8yYGjfkQB3mbt2kGHDH0FLbWZ4"
            },
            "Export": {
              "Name": "sls-meetup-dev-CheckMeetingExistsLambdaFunctionQualifiedArn"
            }
          },
          "HttpApiId": {
            "Description": "Id of the HTTP API",
            "Value": {
              "Ref": "HttpApi"
            },
            "Export": {
              "Name": "sls-meetup-dev-HttpApiId"
            }
          },
          "HttpApiUrl": {
            "Description": "URL of the HTTP API",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "HttpApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  }
                ]
              ]
            },
            "Export": {
              "Name": "sls-meetup-dev-HttpApiUrl"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-dotenv-plugin",
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createUser": {
        "handler": "src/Handlers/AuthHandlers/createUser.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/signup",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v1/auth/signup"
          }
        ],
        "name": "meetup-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionkMi3MVQ2ZP5kkrKyHLUIX9EkXU6VvrSXCSe6irI0U"
      },
      "login": {
        "handler": "src/Handlers/AuthHandlers/login.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/login",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v1/auth/login"
          }
        ],
        "name": "meetup-dev-login",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoginLambdaVersionom9b7DgQbcYfNGdUYHvAhRZIiXA9WgfqUwzHJ63swOc"
      },
      "getUser": {
        "handler": "src/Handlers/AuthHandlers/getUser.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/get-user",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/auth/get-user"
          }
        ],
        "name": "meetup-dev-getUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUserLambdaVersionkLpruA97OOhNEUyEv3whtz2tUAOaVYsg0PbXTlZY"
      },
      "getMeetingHistory": {
        "handler": "src/Handlers/AuthHandlers/getMeetingHistory.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/auth/get-meeting-history",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/auth/get-meeting-history"
          }
        ],
        "name": "meetup-dev-getMeetingHistory",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetMeetingHistoryLambdaVersion4ylaSJVQVUol32nttE6oqgcpifFyPxeu77QXWERZl1s"
      },
      "createMeeting": {
        "handler": "src/Handlers/MeetingHandlers/createMeeting.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/meet/create-meeting",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/meet/create-meeting"
          }
        ],
        "name": "meetup-dev-createMeeting",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateMeetingLambdaVersionG2CN92Ot9hqezW9STeo3a0ZBLXMI5XjrEZwol8GH3o"
      },
      "getAllMeetings": {
        "handler": "src/Handlers/MeetingHandlers/getAllMeetings.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/meet/get-all-meetings",
              "method": "GET"
            },
            "resolvedMethod": "GET",
            "resolvedPath": "/api/v1/meet/get-all-meetings"
          }
        ],
        "name": "meetup-dev-getAllMeetings",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAllMeetingsLambdaVersionAcNngvUat5ds05uSXEFItTpV062GygIEjj1nhKvadY"
      },
      "joinMeeting": {
        "handler": "src/Handlers/MeetingHandlers/joinMeeting.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/meet/join-meeting",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v1/meet/join-meeting"
          }
        ],
        "name": "meetup-dev-joinMeeting",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "JoinMeetingLambdaVersionYgllTYrSGmpFuxPGZ59QlnAW4f2HeDuB6RLCjuzM"
      },
      "checkMeetingExists": {
        "handler": "src/Handlers/MeetingHandlers/checkMeetingExists.handler",
        "events": [
          {
            "httpApi": {
              "path": "/api/v1/meet/check-meeting-exists",
              "method": "POST"
            },
            "resolvedMethod": "POST",
            "resolvedPath": "/api/v1/meet/check-meeting-exists"
          }
        ],
        "name": "meetup-dev-checkMeetingExists",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CheckMeetingExistsLambdaVersion3ejq97jr5WsMxsO8yYGjfkQB3mbt2kGHDH0FLbWZ4"
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "meetup",
      "frameworkVersion": "3",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "F:\\CODING\\PROJECTS\\Video Conference\\serverless_backend\\.serverless\\meetup.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/meetup/dev/1692965352949-2023-08-25T12:09:12.949Z",
    "artifact": "meetup.zip"
  }
}